{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to Lucy's Course Notes","text":"<p>This is my home page. I will use it to organize and share my course notes.</p>"},{"location":"tutorials/go-setup/","title":"Setting up a dev container for Go","text":"<ul> <li> <p>Primary author: Lucille Moore</p> </li> <li> <p>Reviewer: Falisha Khokhar</p> </li> </ul>"},{"location":"tutorials/go-setup/#go-tutorial","title":"Go Tutorial","text":"<p>This tutorial will cover how to set up a Go Development Container and create a GitHub repository. We will demonstrate these tasks with a simple \"Hello World!\" program example.</p> <p>The tutorial will follow three main sections:</p> <ol> <li>Initializing a local git repository.</li> <li>Setting up a development container for Go.</li> <li>Writing a simple hello world program.</li> </ol> <p>Parts One and Two of this tutorial are adapted from Kris Jordan's Starting a Static Website Project with MkDocs tutorial, with modifications to support Go development.</p>"},{"location":"tutorials/go-setup/#prerequisites","title":"Prerequisites","text":"<p>Download the following necessary tools for this project! - Visual Studio Code - Docker - Git</p>"},{"location":"tutorials/go-setup/#part-1-creating-a-local-directory-and-initializing-git","title":"Part 1: Creating a Local Directory and Initializing Git","text":"<ol> <li>Open VS Code, and open the terminal. Make sure you're at the root of wherever you want the project to be housed.</li> <li>Create a new directory for your project using the terminal command <code>mkdir go-tutorial</code> then enter the new directory with <code>cd go-tutorial</code>.</li> <li>Once you're inside the project directory, initialize an empty git repository with <code>git init</code>. This will create a place to store version control data on your local machine.</li> <li>Create a README file to start your project documentation. <code>echo \"# Go Starter Project\" &gt; README.md</code></li> <li>Add your changes to the git repo and commit them with an inital commit message. <pre><code>git add README.md\ngit commit -m \"Initial commit with README\"\n</code></pre></li> </ol>"},{"location":"tutorials/go-setup/#youve-now-set-up-the-directory-and-version-control-for-your-project","title":"You've now set up the directory and version control for your project!","text":""},{"location":"tutorials/go-setup/#part-2-setting-up-the-development-environment","title":"Part 2: Setting Up the Development Environment","text":""},{"location":"tutorials/go-setup/#step-1-add-development-container-configuration","title":"Step 1: Add Development Container Configuration","text":"<ol> <li>Open the go-tutorial directory that you just created in VS Code. Either via File &gt; Open Folder or <code>cd path-to-directory</code> in the terminal. Ensure your terminal is in the correct directory before proceeding.</li> <li>Install the Dev Containers extension in VS Code. You can do this via the extensions widget in the left hand tool bar.</li> <li>Inside your go-tutorial directory, create a folder titled .devcontainer and create a file titled devcontainer.json inside that folder.</li> <li>Add the following content to devcontainer.json: <pre><code>{\n  \"name\": \"Go Dev Environment\",\n  \"image\": \"mcr.microsoft.com/devcontainers/go:latest\",\n  \"customizations\": {\n    \"vscode\": {\n      \"extensions\": [\"golang.go\"]\n    }\n  }\n}\n</code></pre></li> </ol> <p>Explanations:</p> <ul> <li><code>name</code>: Descriptive name for your dev container.</li> <li><code>image</code>: Specifies the Go development environment Docker image.</li> <li><code>customizations</code>: Installs the Go VS Code extension for your container.</li> </ul>"},{"location":"tutorials/go-setup/#step-2-reopen-the-project-in-a-dev-container","title":"Step 2: Reopen the Project in a Dev Container","text":"<p>Press <code>Ctrl+Shift+P</code> (or <code>Cmd+Shift+P</code> on Mac), type \"Dev Containers: Reopen in Container,\" and select the option. Wait for the container to set up (this may take a few minutes).</p> <p>WARNING: Make sure Docker is running before reopening the project in a dev container. Without Docker running, the container won't initialize.</p>"},{"location":"tutorials/go-setup/#part-3-getting-started-with-go","title":"Part 3: Getting Started with Go","text":"<p>Before creating your first Go program, check to see that your installation was successful with the <code>go version</code> command.</p>"},{"location":"tutorials/go-setup/#step-1-initialize-a-go-mod-file","title":"Step 1: Initialize a Go Mod File","text":"<pre><code>go mod init hello-comp423\n</code></pre>"},{"location":"tutorials/go-setup/#step-2-create-a-new-hellogo-file-and-paste-the-following-code-into-it","title":"Step 2: Create a new hello.go file and paste the following code into it.","text":"<pre><code>package main\n\nimport \"fmt\"\n\nfunc main() {\n    fmt.Println(\"Hello COMP423\")\n}\n</code></pre> <p>This is your Go code. In this code, you:</p> <ul> <li>Declare a main package (a way to group functions, made up of all files in the main directory).</li> <li>Import the fmt package, this contains functions for formatting text. It's one of the standard library packages that comes with installing Go.</li> <li>Implement a main function to print \"Hello, World!\" to the console. The main function executes by default when you run the main package.</li> </ul>"},{"location":"tutorials/go-setup/#step-3-run-your-code-in-the-command-line","title":"Step 3: Run your code in the command line.","text":"<p>There are two options to run your code now that the program is written. First, you can use the <code>go run</code> command. This command compiles and runs the program in a single step. <pre><code>$ go run .\n</code></pre></p> <p>The second option is to use <code>go build</code>. This command compiles the Go program into binary, creating an executable file that can run independently. With that file, you can use the <code>./hello</code> command to run the executable.</p> <pre><code>$ go build -o hello\n$ ./hello\n</code></pre>"},{"location":"tutorials/go-setup/#congratulations","title":"Congratulations!","text":""},{"location":"tutorials/go-setup/#youve-now-run-your-first-program-in-the-go-language-complete-with-a-git-repository-and-development-container","title":"You've now run your first program in the Go language, complete with a git repository and development container.","text":""}]}